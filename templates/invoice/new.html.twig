{% extends 'base.html.twig' %}

{% block title %}New invoice{% endblock %}

{% block body %}
    <div>
        <h1>Welcome to your Cart</h1>

        {{ include('invoice/_form.html.twig') }}

        <a href="{{ path('app_invoice_index') }}">back to list</a>
    </div>

    <script>
        let productList = {};
        let cartList = {};
        let productIds = {};

        $.ajax({
            url: "{{ path('app_product_list') }}",
            method: 'GET',
            success: function(data) {
                productList = data.productList;
                productIds = data.productIds;
            },
            error: function () {
                console.error('Product API call failed');
            }
        })

        let collectionHolder;

        //setting up add product button
        let addProductButton = $('<button type="button" class="btn btn-info mb-3 mt-3">Add a product</button>');

        $(document).ready(function(){

            $('.order-button').click(function (){
                //to check atleast one product is added
                if($('.card').length == 0){
                    alert('Please select a product before submitting order');
                    return false;
                }
            });

            $('.invoice-discount').on('change', function(){
                let discount = parseFloat($(".invoice-discount").val());
                let total = parseFloat($(".invoice-price").val());
                let totalAfterDiscount = total - ((total * discount) / 100);
                // $(".invoice-total").val(totalAfterDiscount.toFixed(2));

                let tax = parseFloat($(".invoice-tax").val());
                let finalAmountAfterTax = totalAfterDiscount + ((totalAfterDiscount * tax) / 100);
                $(".invoice-total").val(finalAmountAfterTax.toFixed(2));
            });

            $('.invoice-tax').on('change', function(){
                let discount = parseFloat($(".invoice-discount").val());
                let total = parseFloat($(".invoice-price").val());
                let totalAfterDiscount = total - ((total * discount) / 100);

                let tax = parseFloat($(".invoice-tax").val());
                let finalAmountAfterTax = totalAfterDiscount + ((totalAfterDiscount * tax) / 100);
                $(".invoice-total").val(finalAmountAfterTax.toFixed(2));
            });

            collectionHolder = $('#products');

            //append add new product button to collection holder
            collectionHolder.append(addProductButton);

            collectionHolder.data('index',collectionHolder.find('.card').length)

            collectionHolder.find('.card').each(function (){
                addRemoveButton($(this));
            });

            //trigger action for add new product button
            addProductButton.click(function (e) {
                e.preventDefault();

                //create new form and append to collection holder
                addNewProductForm();

                $('.item-name').on('change', function(){
                    autoPopulate(this);
                });

                $('.item-quantity').on('change', function(){
                    autoPopulate(this);
                });
            })
        })

        function addRemoveButton(card){

            // remove button
            let removeButton = $('<button type="button" class="btn btn-danger">Remove</button>');
            let cardFooter = $('<div class="card-footer"></div>').append(removeButton);
            card.append(cardFooter)
            //click event
            removeButton.click(function (e) {
                $(e.target).parents('.card').remove();
            })
        }

        function addNewProductForm(){
            //get prototype
            let prototype = collectionHolder.data('prototype');

            //get index of last product form
            let index = collectionHolder.data('index');
            //create product form
            let newProductForm = prototype;

            newProductForm = newProductForm.replace(/__name__/g,index);

            collectionHolder.data('index',index+1);

            //creating new card to be added as product
            let card =  $('<div class="card card-warning mt-1"><div class="card-header"></div></div>');

            //creating card body, then appending new productform
            let cardBody = $('<div class="card-body"></div>').append(newProductForm);

            //appending card body to card
            card.append(cardBody);

            //appending remove button to new card
            addRemoveButton(card);

            //append card before add new product button
            addProductButton.before(card)

            //appending card to collection holder
            // collectionHolder.append(card)
        }

        function autoPopulate(currentForm){

            let currentProductForm = $(currentForm).parent().parent();

            let itemId = currentProductForm.find('.item-name').val();
            let itemPrice = productList[itemId].price;
            let itemQuantity = currentProductForm.find('.item-quantity').val();
            let itemCost = itemPrice * itemQuantity;

            if (itemQuantity > productList[itemId].quantity) {
                alert('No stock available, please reduce quantity one');
                currentProductForm.find('.item-quantity').val(0);
                currentProductForm.find('.item-cost').val(0);
                currentProductForm.find('.item-discount').val(0);
                currentProductForm.find('.item-price').val(0);

                currentProductForm.find('.item-quantity').focus();

                return false;
            }

            // if (itemQuantity > cartList[itemId].quantity) {
            //     alert('No stock available, please reduce quantity three');
            //     currentProductForm.find('.item-quantity').val(0);
            //     currentProductForm.find('.item-cost').val(0);
            //     currentProductForm.find('.item-discount').val(0);
            //     currentProductForm.find('.item-price').val(0);
            //
            //     currentProductForm.find('.item-quantity').focus();
            //
            //     return false;
            // }

            // cartList[itemId].quantity = cartList[itemId].quantity - itemQuantity;
            // console.log(cartList[itemId].quantity);

            currentProductForm.find('.item-cost').val(itemCost);
            currentProductForm.find('.item-discount').val(itemCost/10);
            currentProductForm.find('.item-price').val(itemCost - (itemCost/10));

            let total = 0.0;
            let discount = parseFloat($(".invoice-discount").val());
            let tax = parseFloat($(".invoice-tax").val());
            $(".item-price").each(function() {
                total = total + parseFloat(this.value);
            });

            let finalAmount = total - (total * (discount/100));
            finalAmount = finalAmount + (finalAmount * (tax/100))
            $(".invoice-price").val(total.toFixed(2));
            $(".invoice-total").val(finalAmount.toFixed(2));

            // Product quantity check : start
            for (productId of productIds) {
                cartList[productId] = {
                    quantity: 0
                };
            }
            $(".item-name").each(function() {
                let itemId = this.value;
                let cartQuantity = parseInt($(this).parent().parent().find('.item-quantity').val());

                console.log(productList[itemId].quantity, cartList[itemId].quantity, cartQuantity);
                if (productList[itemId].quantity < cartList[itemId].quantity + cartQuantity) {
                    alert('No stock available, please reduce quantity two');

                    currentProductForm.find('.item-quantity').val(0);
                    currentProductForm.find('.item-cost').val(0);
                    currentProductForm.find('.item-discount').val(0);
                    currentProductForm.find('.item-price').val(0);

                    currentProductForm.find('.item-quantity').focus();

                    return false;
                }
                cartList[itemId].quantity = cartList[itemId].quantity + cartQuantity;
            });
            // Product quantity check : end
        }
    </script>
{% endblock %}
